"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.db = exports.crud = exports.whereJSON = exports.findInJSON = exports.searchInJSON = exports.findJSON = exports.searchJSON = exports.deleteJSON = exports.updateJSON = exports.appendJSON = exports.writeJSON = exports.readJSON = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const R = __importStar(require("rambda"));
const utils_1 = require("./utils");
exports.readJSON = (file) => () => fs_1.promises
    .readFile(path_1.default.resolve(process.cwd(), 'src/', file), 'utf8')
    .then((data) => JSON.parse(data));
exports.writeJSON = (file) => (data) => fs_1.promises.writeFile(path_1.default.resolve(process.cwd(), 'src/data', file), JSON.stringify(data, null, 2), {
    encoding: 'utf8',
});
exports.appendJSON = (file) => (data) => exports.readJSON(file)()
    .then((records) => {
    const record = Object.assign({ id: records.length + 1 }, data);
    return {
        id: record.id,
        _data: record,
        _file: records.concat(record),
    };
})
    .then(({ _file, _data }) => exports.writeJSON(file)(_file).then(R.always(_data)).then(utils_1.trace('append')));
exports.updateJSON = (file) => (data) => exports.readJSON(file)()
    .then(R.map((row) => {
    if (data.id === row.id)
        return Object.assign({}, data);
    return row;
}))
    .then(R.tap(exports.writeJSON(file)))
    .then(R.filter((row) => row.id === data.id));
exports.deleteJSON = (file) => (data) => exports.readJSON(file)()
    .then(R.filter((row) => row[data.key] !== data.value))
    .then(R.tap(exports.writeJSON(file)))
    .then(R.always(data.id));
const unary = (fn) => (x) => fn(x);
// query :: {k: v} -> {k: v} -> boolean
// return true if all properties in the conditions object match the input object
const query = (conditions) => R.where(R.map(unary(R.equals), conditions));
// @ts-ignore
exports.searchJSON = (file) => (data) => exports.readJSON(file)().then(R.filter(unary(query(data))));
// @ts-ignore
exports.findJSON = (file) => (data) => exports.readJSON(file)().then(R.find(unary(query(data))));
// { id: [1, 2, 3 ]}
exports.searchInJSON = (file) => (data) => exports.readJSON(file)().then(R.filter((record) => {
    return Object.entries(data).every(([key, values]) => values.includes(record[key]));
}));
exports.findInJSON = (file) => (data) => exports.readJSON(file)().then(R.filter((record) => {
    return Object.entries(data).every(([key, values]) => values.includes(record[key]));
}));
const spec = {
    id: { _eq: 1 },
    name: { _contains: 'andrew' },
};
const _conditions = {
    // _or: R.either(R.map(cond(value)(obj)),
    _neq: R.complement(R.equals),
    _in: R.includes,
    _eq: (x) => (y) => x === y,
    _lt: (x) => (y) => y < x,
    _lte: (x) => (y) => y <= x,
    _gt: (x) => (y) => y > x,
    _gte: (x) => (y) => y >= x,
    _reg: (x) => R.test(new RegExp(x, 'gim')),
    _startsWith: R.startsWith,
    _endsWith: R.endsWith,
    _contains: (x) => R.test(new RegExp(`[^\\b]${x}[^\\b]`, 'gim')),
};
function getCondition(condition) {
    return _conditions[condition];
}
const cond = (spec) => (obj) => {
    const _where = {};
    for (const [key, rule] of Object.entries(spec)) {
        if (key === '_or')
            return R.anyPass(R.map(cond)(rule))(obj);
        if (key === '_and')
            return R.allPass(R.map(cond)(rule))(obj);
        // return R.anyPass([(x: number) => x > 2, (y: number) => y < 4])(1)
        const conditions = [];
        for (const [directive, value] of Object.entries(rule)) {
            if (directive === '_or') {
                // @ts-ignore
                conditions.push(R.anyPass(R.map(cond)(value))(obj));
            }
            else if (directive === '_and') {
                // @ts-ignore
                conditions.push(R.allPass(R.map(cond)(value))(obj));
            }
            else {
                conditions.push(getCondition(directive)(value));
            }
        }
        _where[key] = R.allPass(conditions);
    }
    return R.where(_where, obj);
};
exports.whereJSON = (file) => (data) => exports.readJSON(file)().then(R.filter(cond(data.where)));
exports.crud = (file) => ({
    read: exports.readJSON(file),
    create: exports.appendJSON(file),
    update: exports.updateJSON(file),
    delete: exports.deleteJSON(file),
    find: exports.findJSON(file),
    search: exports.searchJSON(file),
    searchIn: exports.searchInJSON(file),
    findIn: exports.findInJSON(file),
    where: exports.whereJSON(file),
});
exports.db = {
    authors: exports.crud('data/authors.json'),
    books: exports.crud('data/books.json'),
    publishers: exports.crud('data/publishers.json'),
    test: exports.crud('data/test.json'),
};
console.log(exports.db.authors.find({ id: 2 }));
//# sourceMappingURL=data:application/json;base64,